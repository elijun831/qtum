# Define the pod
apiVersion: v1
kind: Pod
metadata:
  name: azurefile
  namespace: default
spec:
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
        claimName: azurefile
          #  securityContext:
          #    runAsUser: 1000
          #    runAsGroup: 1000
          #    fsGroup: 1000
  containers:
    - name: quantumworkspace
      image: elijun831/quantumworkspace:1.0.0
      command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root"]
      ports:
        - containerPort: 8888
          name: "jupyterlab"
      volumeMounts:
        - mountPath: "/usr/share/k8s/pods"
          name: pv-storage
          #      securityContext:
          #        allowPrivilegeEscalation: false
          #      resources:
          #        requests:
          #          cpu: "100m" 
          #          memory: "128Mi" 
          #        limits:
          #          cpu: "500m"
          #          memory: "256Mi"
---
# Define the persistent volume (PV)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile
  namespace: default
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  azureFile:
    secretName: azure-secret
#    secretNamespace: default
    shareName: quantumworkspacek8s
    readOnly: false
  mountOptions:
  - dir_mode=0644
  - file_mode=0664
  - uid=1000
  - gid=1000
  - mfsymlinks
  - nobrl
---
# Define the PVC.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: azurefile
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 5Gi # The amount of storage you want to allocate for the files; you can change this value.
---
# Define the storage class (If an Azure File Storage exists, do not use this section; please comment the section. Only uncomment it if you do not have AFS yet.)
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#  name: azurefile
# provisioner: kubernetes.io/azure-file
# parameters:
#  skuName: Standard_LRS # The SKU name of the storage account; you can change this value (e.g., Standard_LRS, Standard_GRS, Standard_RAGRS, Premium_LRS, or Premium_ZRS).
#  location: eastus # The location of the storage account; you can change this Azure region (e.g., eastus, westus, southcentralus, westeurope, eastasia).
#  storageAccount: quantumkubernetesk8s # The name of the storage account; make sure to set the storage in your Azure subscription.
#  secretName: azure-secret
#  secretNamespace: default
---
# Define the secret as well as your Azure credentials.
apiVersion: v1
kind: Secret
metadata:
  name: azure-secret
type: Opaque
data:
  azure_subscription_id: <base64-encoded-azure_subscription_id>
  azure_tenant_id: <base64-encoded-azure_tenant_id>
  azure_client_id: <base64-encoded-azure_client_id>
  azure_client_secret: <base64-encoded-azure_client_secret>
  azurestorageaccountname: <base64-encoded-azurestorageaccountname>
  azurestoragekey: <base64-encoded-azurestoragekey>

# Please note that the base64 encoded values for azure_subscription_id, azure_tenant_id, azure_client_id, and azure_client_secret. 
# should be replaced with your own Azure credentials, also base64 encoded.
# On Linux and MacOS, you can use the command "echo -n 'value' | base64" to encode. 
# On Windows, you can use the PowerShell command "[Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes("value"))" to encode.
